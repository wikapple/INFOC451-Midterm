const pool = require('../config/database');
const debug = require('debug')('app:mediaDataAccess');

const getAllCategories = async () => {
    try{
        const sqlQuery = `CALL category_SelectAll()`;
        const categoryResults = await pool.query(sqlQuery, []);
        return categoryResults[0];

    } catch (error) {
        debug(error);
    }
}

const getAllBooks = async () => {
    try{
        const sqlQuery = `CALL book_SelectAll()`;
        const booksResult = await pool.query(sqlQuery, []);
        let books = booksResult[0];
        for(let book of books){
            const categoryQuery = `Call category_SelectByMediaId(?)`;
            const categories = await pool.query(categoryQuery, [book.mediaId])
            book.categories = categories[0];
        }
        return books;
    }
    catch (error) {
        debug(error);
    }
}

const addBook = async (newBook) => {
    try {
        const sqlQuery = `CALL book_Insert(?, ?, ?, ?, ?, ?, ?)`
        const params = [newBook.title, newBook.description, newBook.isbn, newBook.author, newBook.publisher, newBook['categories[]'].join(), newBook.pageCount];
        const result = await pool.query(sqlQuery, params);
    } catch (error) {
        debug(error);
    }
}
const updateBook = async (book) => {
    try {
        const sqlQuery = `CALL book_Update(?, ?, ?, ?, ?, ?, ?, ?)`
        const params = [newBook.mediaId, newBook.title, newBook.description, newBook.isbn, newBook.author, newBook.publisher, newBook['categories[]'].join(), newBook.pageCount];
        const result = await pool.query(sqlQuery, params);
    } catch (error) {
        debug(error);
    }
}

const getUserByEmail = async (email) => {
    try{
        const sqlQuery = `CALL user_SelectByEmail(?)`;
        const result = await pool.query(sqlQuery, [email]);
        return result[0][0];
    }
    catch (error) {
        debug(error);
    }
}

const getUserById = async (id) => {
    try{
        const sqlQuery = `CALL user_SelectById(?)`;
        const result = await pool.query(sqlQuery, [id]);
        return result[0][0];
    }
    catch (error) {
        debug(error);
    }
}

const createUser = async (name, phoneNumber, email, passwordHash, dob) => {
    try {
        const sqlQuery = `Call user_Insert(?,?,?,?,?, @IdOutput); select @IdOutput;`;
        const result = await pool.query(sqlQuery, [name, phoneNumber, email, passwordHash, dob]);
        
        return result[1][0]['@IdOutput'];
    }
    catch (error) {
        debug(error);
    }
}

const updateUser = async (id, name, phoneNumber, email, passwordHash, dob, userRoleId) => {
    try {
        const sqlQuery = `Call user_UpdateById(?,?,?,?,?,?,?)`
        const result = await pool.query(sqlQuery, [id, name, phoneNumber, email, passwordHash, dob, userRoleId]);
        return result.IsSuccess;
    }
    catch (error) {
        debug(error);
    }
}

const selectAllRoles= async () => {
    try{
        const sqlQuery = `CALL role_SelectAll()`;
        const results = await pool.query(sqlQuery, []);
        return results;
    }
    catch (error) {
        debug(error);
    }
}

module.exports = {getAllCategories, getAllBooks, addBook, updateBook};

