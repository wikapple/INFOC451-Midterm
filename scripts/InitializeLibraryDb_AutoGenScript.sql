-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               11.4.0-MariaDB - mariadb.org binary distribution
-- Server OS:                    Win64
-- HeidiSQL Version:             12.3.0.6589
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- Dumping database structure for librarydb
DROP DATABASE IF EXISTS `librarydb`;
CREATE DATABASE IF NOT EXISTS `librarydb` /*!40100 DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci */;
USE `librarydb`;

-- Dumping structure for procedure librarydb.DeleteUserById
DROP PROCEDURE IF EXISTS `DeleteUserById`;
DELIMITER //
CREATE PROCEDURE `DeleteUserById`(
	IN `idToDelete` INT
)
    COMMENT 'Deletes the user by their UserId'
BEGIN
	DELETE FROM librarydb.libraryuser
	WHERE UserId = idToDelete;
END//
DELIMITER ;

-- Dumping structure for procedure librarydb.InsertUser
DROP PROCEDURE IF EXISTS `InsertUser`;
DELIMITER //
CREATE PROCEDURE `InsertUser`(
	IN `nameInput` VARCHAR(255),
	IN `phoneNumberInput` VARCHAR(20),
	IN `emailInput` VARCHAR(255),
	IN `passwordHashInput` VARCHAR(255),
	IN `dobInput` DATE,
	OUT `IdOutput` INT
)
    COMMENT 'Inserts a user into the database with the default role of Member'
BEGIN
	SET @memberIdVar = (SELECT RoleId FROM userrole WHERE NAME LIKE 'Member' LIMIT 1);

	INSERT INTO librarydb.libraryuser (NAME, phoneNumber, email, passwordhash, dateofbirth, UserRoleId)
	VALUES(nameInput, phoneNumberInput, emailInput, passwordHashInput, dobInput, @memberIdVar);
	
	SET IdOutput = LAST_INSERT_ID();
END//
DELIMITER ;

-- Dumping structure for table librarydb.libraryuser
DROP TABLE IF EXISTS `libraryuser`;
CREATE TABLE IF NOT EXISTS `libraryuser` (
  `UserId` int(11) NOT NULL AUTO_INCREMENT COMMENT 'The user''s system ID auto-generated by the database. ',
  `Name` varchar(255) NOT NULL COMMENT 'The user''s full name stored in one column',
  `PhoneNumber` varchar(20) NOT NULL COMMENT 'The user''s phone number',
  `Email` varchar(255) NOT NULL COMMENT 'The user''s email address, that will also be used for log in ',
  `PasswordHash` varchar(255) NOT NULL COMMENT 'The hashed value of the user''s password',
  `DateOfBirth` date NOT NULL COMMENT 'The user''s date of birth',
  `UserRoleId` int(11) NOT NULL COMMENT 'The user may only have one user role',
  PRIMARY KEY (`UserId`),
  KEY `UserRoleId` (`UserRoleId`),
  CONSTRAINT `libraryuser_ibfk_1` FOREIGN KEY (`UserRoleId`) REFERENCES `userrole` (`RoleId`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- Dumping data for table librarydb.libraryuser: ~3 rows (approximately)
DELETE FROM `libraryuser`;
INSERT INTO `libraryuser` (`UserId`, `Name`, `PhoneNumber`, `Email`, `PasswordHash`, `DateOfBirth`, `UserRoleId`) VALUES
	(1, 'admin', '111-222-3333', 'admin@admin.com', '$2a$12$PbFqKsS1gGmPuMHPus6jIOst0RpmOTkji8s2tAyxUyGglh7tMu3Ny', '1990-01-01', 3),
	(2, 'staff', '123-456-7890', 'staff@staff.com', '$2a$12$XZt.7XHQtwJ4MwpmGPbAOucT7AjDgRF63E4JzGlLoUNSpLEFSfihS', '1995-05-05', 2),
	(3, 'member', '987-654-3210', 'member@member.com', '$2a$12$AQ6qrVf0HPFdL.9hsLVkAOrnu4kr/2CIuE5i..zdmGkUbR7SghR5e', '2000-10-10', 1);

-- Dumping structure for procedure librarydb.SelectAllRoles
DROP PROCEDURE IF EXISTS `SelectAllRoles`;
DELIMITER //
CREATE PROCEDURE `SelectAllRoles`()
SELECT RoleId, Name From UserRole//
DELIMITER ;

-- Dumping structure for procedure librarydb.SelectUserByEmail
DROP PROCEDURE IF EXISTS `SelectUserByEmail`;
DELIMITER //
CREATE PROCEDURE `SelectUserByEmail`(IN emailInput varchar(255))
SELECT u.UserId, u.Name, u.PhoneNumber, u.Email, u.PasswordHash, u.DateOfBirth, r.Name UserRole FROM libraryuser u INNER JOIN userrole r ON u.UserRoleId = r.RoleId WHERE u.email = emailInput//
DELIMITER ;

-- Dumping structure for procedure librarydb.SelectUserById
DROP PROCEDURE IF EXISTS `SelectUserById`;
DELIMITER //
CREATE PROCEDURE `SelectUserById`(IN idInput int)
SELECT u.UserId, u.Name, u.PhoneNumber, u.Email, u.PasswordHash, u.DateOfBirth, r.Name UserRole FROM libraryuser u INNER JOIN userrole r ON u.UserRoleId = r.RoleId WHERE u.UserId = idInput//
DELIMITER ;

-- Dumping structure for procedure librarydb.UpdateUser
DROP PROCEDURE IF EXISTS `UpdateUser`;
DELIMITER //
CREATE PROCEDURE `UpdateUser`(
	IN `IdInput` INT,
	IN `nameInput` VARCHAR(255),
	IN `phoneNumberInput` VARCHAR(20),
	IN `emailInput` VARCHAR(255),
	IN `passwordHashInput` VARCHAR(255),
	IN `dobInput` DATE,
	IN `UserRoleIdInput` INT
)
BEGIN
	UPDATE librarydb.libraryuser u
	SET
		u.Name = nameInput,
		u.PhoneNumber = phoneNumberInput,
		u.Email = emailInput,
		u.PasswordHash = passwordHashInput,
		u.DateOfBirth = dobInput,
		u.UserRoleId = UserRoleIdInput
	WHERE 
		u.UserId = idInput;
END//
DELIMITER ;

-- Dumping structure for table librarydb.userrole
DROP TABLE IF EXISTS `userrole`;
CREATE TABLE IF NOT EXISTS `userrole` (
  `RoleId` int(11) NOT NULL AUTO_INCREMENT COMMENT 'The system ID of the given role. Auto-generated by the database',
  `Name` varchar(50) NOT NULL COMMENT 'The name of the user role',
  PRIMARY KEY (`RoleId`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci COMMENT='The user roles that may be given to a user. Determines if a user is authorized to access certain content or perform certain actions.\r\n';

-- Dumping data for table librarydb.userrole: ~3 rows (approximately)
DELETE FROM `userrole`;
INSERT INTO `userrole` (`RoleId`, `Name`) VALUES
	(1, 'Member'),
	(2, 'StaffMember'),
	(3, 'Administrator');

/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
